plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.google.cloud.tools.jib' version '3.4.0'
}

group = 'springboot3'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation group: 'org.postgresql', name:'postgresql', version: '42.2.19'

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.modelmapper:modelmapper:3.0.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j:9.1.0'


	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}

tasks.named('test') {
	useJUnitPlatform()
}

jib {
	def imageTag = System.getenv("IMAGE_TAG")
	def serverPort = "8080"
	def activeProfile = System.getenv("ACTIVE_PROFILE")
	def imageName = System.getenv("IMAGE_NAME")
	from {
		image = 'amazoncorretto:17-alpine3.17-jdk'
	}
	to {
		image = imageName + ':latest'
		tags = ['latest', imageTag]
	}
	container {
		jvmFlags = [
				'-Dspring.profiles.active=' + activeProfile,
				'-Dserver.port=' + serverPort,
				'-Xms1000M',
				'-Xmx1000M',
				'-XX:+UseG1GC',
				'-XX:+UseContainerSupport',
				'-XX:MaxGCPauseMillis=400',
				'-XX:+DisableExplicitGC',
				'-XX:+AlwaysPreTouch', //미리 영역 채우기
				'-Duser.timezone=Asia/Seoul', //타임존
				'-Dfile.encoding=UTF-8',
				'-server'
		]
		ports = [serverPort]
	}
}
